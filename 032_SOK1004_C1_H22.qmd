Denne oppgaven er tilpasset fra [Case 1](https://uit-sok-1004-h21.github.io/case_1_bnp.html), skrevet av Øystein Myrland for kurset SOK-1004, høsten 2021. Eventuelle feil og mangler er mine egne. Rett spørsmål og kommentarer til [even.c.hvinden\@uit.no](mailto:even.c.hvinden@uit.no).

## Instruksjoner

Denne oppgaven skal løses interaktivt i RStudio ved å legge inn egen kode og kommentarer. Det ferdige dokumentet lagres med kandidatnummeret som navn `[kandidatnummer]_SOK1004_C1_H22.qmd` og lastes opp på deres GitHub-side. Hvis du har kandidatnummer 43, så vil filen hete `43_SOK1004_C1_H22.qmd`. Påse at koden kjører og at dere kan eksportere besvarelsen til pdf. Dere leverer lenken til GitHub-repositoriumet i Canvas.

## Bakgrunn

Vi skal analysere utviklingen i bruttonasjonalprodukt (BNP) per person i Norge. Vi bruker data Statistisk Sentralbyrå (SSB), tabell "09842: BNP og andre hovedstørrelser (kr per innbygger), etter statistikkvariabel og år". Tabellen inneholder årlige data på BNP per innbygger, fra 1970 til 2021.

## I. API, visualisering

SSB gir oss tilgang til sine data via en [API](https://www.ssb.no/omssb/tjenester-og-verktoy/api) (*Application Programming Interface*), programvare som lar to applikasjoner kommunisere med hverandre. SSB tilbyr en API med [ferdige datasett](https://data.ssb.no/api/v0/dataset/). Her er det om lag 250 kontinuerlig oppdaterte datasett med en fast URL over de mest brukte tabellene i Statistikkbanken.

For å få tilgang til tabellen med bruttonasjonalprodukt må vi benytte tjenesten [PxWebApi](https://www.ssb.no/omssb/tjenester-og-verktoy/api/px-api). Her finner du en [API konsoll](https://data.ssb.no/api/v0/no/console/) med en søkefunksjon. Prøv å søk på "`bnp`" og merk forslaget: tabell 09842. Søk på denne, og noter URL-en. Den vil vi bruke etterpå.

Til å laste ned dataene skal vi bruke en R-pakke, [PxWebApiData](https://cran.r-project.org/web/packages/PxWebApiData/index.html), som SSB har laget. I første omgang skal vi bruke funksjonen `ApiData()`. Syntaksen er ikke den samme som i `tidyverse`, og har noen litt uvante egenskaper, herunder lagring i tegnformat og en kombinasjon av norsk og engelsk.

**Tips:** Det er typisk instruktivt å se på [eksempel på bruk](https://cran.r-project.org/web/packages/PxWebApiData/vignettes/Introduction.html). Da har man et intuitivt utgangspunkt for hvordan koden kan brukes.

Jeg vil nå vise dere trinnvis hvordan å laste ned dataene. Formålet er å gi dere en idé på hvordan man kan lære seg å bruke en ny pakke eller funksjon. Vi begynner med å laste inn nødvendige pakker:

```{r}
rm(list=ls())
library(tidyverse)
library(PxWebApiData)
```

**NB!** Du må installere `PxWebApiData` først. Kjør kommandoen `install.packages("PxWebApiData")` i konsollen. Det må kun gjøres én gang.

Vi bruker funksjonen `ApiData()` til å hente tabell 09842. Som notert ovenfor fant vi URL-en ved hjelp av søkefunksjonen til SSB. Først prøver vi å laste ned dataene direkte, uten ytterligere tilvalg, og tar en titt på hva vi får.

```{r}
df <- ApiData("http://data.ssb.no/api/v0/no/table/09842")
print(df)
```

**Merk følgende:** `df` inneholder to datasett i formatet `data.frame`. Datasettene heter `"09842: BNP og andre hovedstørrelser (kr per innbygger), etter statistikkvariabel og år"` og `dataset`. Datasettene inneholder 9 verdier av 3 variabler. Variabelen `value` er identisk. Variablene `år` og `Tid` inneholder de identiske verdiene `"1970"`, `"2020"` og `"2020"`. Merk at disse er i tegnformat `<chr>` (derav anførselstegnene) og ikke en numerisk verdi, for eksempel `<dbl>`. Variabelen `statistikkvariabel` og `ContentsCode` inneholder henholdsvis verdiene `BNP`, `KonsumHIO` `MEMOBNP` og `Bruttonasjonalprodukt, Konsum i husholdninger og ideelle organisasjoner` og `MEMO: Bruttonasjonalprodukt. Faste 2015-priser`.

Vi har altså ikke fått hele tabell 09842, men verdiene for tre statistikkvariabler over tre tidsperioder, lagret med forskjellige variabelnavn og verdier.

Det vi trenger er **metadata**: Informasjon som beskriver innholdet i dataene, slik at vi kan filtrere API-spørringen. Kjør følgende kode.

```{r}
metadata <-
  ApiData("http://data.ssb.no/api/v0/no/table/09842", returnMetaData = TRUE)
```

Åpner vi listen `metadata` fra minnet så kan vi se nærmere på den i øvre venstre vindu i Rstudio. Her ser vi to lister kalt `[[1]]` og `[[2]]`. Listene beskriver variablene vi kan filtrere på. Liste `[[1]]` har fire variable: `code`, `text`, `values`, og `valueTexts`. Alle variablene er `<chr>`. Liste `[[2]]` har de samme foregående fire variablene samt en variabel `time`.

-   `code` viser navnene på variablene vi bruker i funksjonen `ApiData()` for å filtrere. Den tar verdiene `ContentsCode` og `Tid`. Legg merke til at utviklerne i SSB her blander norsk og engelsk.

-   `text` er en unik tekstverdi tilknyttet verdien på `code` som forklarer hva vi ser på. Den tar verdien `statistikkvariabel` og `år`. Vi kan altså filtrere på statistikkvariabel og år.

-   `values` viser hvilke verdier av statistikkvariabel og år vi kan velge, med henholdsvis 6 og 52 forskjellige verdier. Du vil kjenne igjen tre av hver fra den første spørringen ovenfor.

-   `valueTexts` gir en unik tekstverdi tilknyttet verdien på `values` som forklarer oss hva vi ser på. For `Tid` og `år` er de identiske, men for `ContentsCode` og `statistikkvariabel` får vi en mer fullstendig forklaring.

-   `time` er en logisk variabel, og tar derfor to verdier: `TRUE` og `FALSE`. I dette tilfellet indikerer den at variabelen `Tid` måler tid, hvilket gjør at funksjonene i pakken vil behandle `Tid` på en annen måte enn en statistikkvariabel.

Vi har nå informasjonen vi trenger til å laste ned BNP-tall mellom 1970 og 2021. Jeg velger å ta BNP med både løpende og faste priser.

```{r}
df <- ApiData("http://data.ssb.no/api/v0/no/table/09842", Tid = paste(1970:2021), ContentsCode = c("BNP","MEMOBNP"))
```

På venstre side av likhetstegnet bruker vi `code` fra metadata. På høyre side velger vi verdier fra `values`. Merk at jeg bruker funksjonen `paste()` for å konvertere numeriske verdier, for eksempel `<dbl>` til tegn `<chr>`.

La oss rydde i data. Det er tre ting å ta tak i:

1.  `df` lagrer informasjonen i to tabeller med samme informasjon, som vist over. Det er unødvendig.

2.  Årstallene er lagret som tegn, `<chr>`. Disse skulle heller være heltall, `<int>`.

3.  Formatet `data.frame` er underlegent `tibble`.

### Oppgave Ia: Rydd i data

Skriv kode som lagrer dataene som én tibble med anstendige variabelnavn og årstall som heltall. Fremover bruker jeg "var", "tid", og "verdi" for "statistikkvariabel", "Tid", og "value".

```{r}
# Jeg velger tabell $datasett og gjør det om til en tibble, samtidig tar jeg verdiene i kolonne "Tid" og endrer dem til tall, og deretter endrer navnet på kolonnene
bnp <- as_tibble(df[[2]]) %>% 
  mutate(Tid = parse_number(Tid)) %>%
  rename(variabel = ContentsCode, år = Tid, kroner = value)
```

### Oppgave Ib: Lag en figur

Følgende kode skaper en enkel figur.

```{r}
bnp %>%
  filter(variabel == "BNP") %>%
  ggplot(aes(x=år,y=kroner)) +
  geom_line()
#Jeg var nødt til å endre noen av navnene på verdiene i eksempelet
```

Lag en pen figur som viser BNP i tusener av kroner per person, i både løpende og faste priser, mellom 2000 og 2021. Skriv en tydelig forklaring og tolkning av figuren. Hvordan har inntektene utviklet seg? Forklar forskjellen mellom BNP i løpende og faste priser. Til hvilke formål er de mest relevante?

```{r}
# Jeg starter med å filtrere ut de relevante årstallene og variablene. Ved å filtrere inn både "BNP" og "MEMOBNP" så kan jeg lage en graf med begge inkludert for på den måten å bedre kunne sammenligne.
bnp %>% 
  filter(år %in% 2000 : 2021, 
         variabel %in% c("BNP", 
                         "MEMOBNP")) %>% 
# Deretter lager jeg en graf med kolonne "år" som x-akse, "kroner" som y-akse. Jeg deler samtidig verdiene i kolonne "kroner" på 1000 for å få det i 1000kr per innbygger.
  ggplot(aes(x = år, 
             y = kroner/1000)) +
# Ved å skrive aes(color = variabel) så separerer ggplot automatisk verdiene etter de forskjellige variablene og gir dem to forskjellige farger. Theme_minimal gjør det mindre rotete.
  geom_line(aes(color = variabel)) +
  theme_minimal()+
# For å slippe å endre noe på selve tibbelen så endrere jeg navn på verdiene når jeg lager grafen of får dermed en mer overseiktelig ledger. Jeg plasserer den også mer hensiktsmessig på grafen (i stedet for hvor den automatisk havner).
  scale_color_discrete(
    labels = c("BNP" = "Løpende Priser",
               "MEMOBNP" = "Faste priser, index 2015"))+
  theme(legend.position = c(0.8, 0.2), 
        legend.title=element_blank())+
# Til sist lager jeg en tittel og endrer navnet på variablene for å gjøre grafen mer oversiktelig.
  labs(title= "BNP per capita (i løpende og faste priser)\n år 2000 til 2021",
       x = "År", 
       y = "Kroner(i 1000 per innbygger)")
```

SVAR\
Figuren viser BNP i Norge i tidsrommet 2000-2021 i tusen kroner. "Løpende priser" er den målte BNP'en per år, ikke justert for inflasjon. "Faste priser" er reell BNP målt inflasjonsjustert for prisnivået i 2015.

Figuren viser klart at selv om den nominelle BNP'en i Norge har steget med over 200.000kr i tidsrommet 2000-2021 så er de faktiske inntektene ikke steget like mye og har derimot holdt seg nærmest flat siden finanskrisen i 2008.

BNP er en måling av produksjon av varer og tjenester (verdiskaping) i et land, etter at produksjonkostnader er trukket fra.

BNP i løpende priser (også kalt Nominell BNP) er en måling av verdiskapingen innenlands målt i markedsprisen det året, det er ikke justert for inflasjon og kan dermed ikke brukes til å beregne vekst over tid. Nominell BNP egner seg mere til å sammenligne flere lands økonomi innnen et gitt år.

Faste priser (Reell BNP) vil vise verdien av produksjon i et land, der hvor verdien av varer og tjenester blir målt etter prisen i et gitt år - dermed kan man observere endringer over tid og har mer grunnlag for å observere vekst.

## II. Transformasjon, visualisering

Våre data er en tidsserie, hvilket betyr at rekkefølgen i observasjonene er ordnet etter tid. Vi skal nå regne prosentvis, årlig endring. La $x_t$ være BNP i år $t$. For eksempel vil $x_{1970}$ være $23616$.

Den årlige endringen i BNP fra år $t-1$ til $t$ er gitt ved $x_{t}-x_{t-1}$. I samfunnsøkonomi er det vanlig å betegne dette som $\Delta x_{t} := x_{t}-x_{t-1}$. Tegnet $\Delta$ er den greske bokstaven delta og betegner differanse. For eksempel vil $\Delta x_{1971}=26363-23616=2747$ kroner.

I mange tilfeller er vi interesserte i relativ vekst: Hvor mye økte BNP, relativt til hva den var i utgangspunkt? Den mest brukte enheten er hundredeler eller prosentvis endring, gitt ved $100 \times \Delta x_{t}/x_{t-1}$. For eksempel var den prosentvise endringen i BNP i 1971 $100 \times \Delta x_{1971}/x_{1970}=100\times(2747/23616)\approx11.6$, hvor $\approx$ betegner "omtrent lik" da jeg viser svaret med kun én desimal. Tilsvarende kan man skrive at $\Delta x_{1971}/x_{1970}=2747/23616\approx0.116=11.6\%$, hvor tegnet $\%$ betegner at beløpet oppgis i hundredeler eller prosent.

## Oppgave IIa: Omorganisere datasett med `pivot_wider()`

Vi skal lage to variable `dBNP` og `dMEMOBNP` som viser relativ endring i `BNP` og `MEMOBNP`. Til dette formålet skal vi bruke kommandoene `pivot_wide()` og `pivot_long()` til å omorganisere dataene. Jeg anbefaler dere først å lese [kapittel 12.3](https://r4ds.had.co.nz/tidy-data.html#pivoting) i pensum. Betrakt følgende kode.

```{r}
bnp_wide <- bnp %>%
  pivot_wider(names_from = variabel, values_from = kroner) 
bnp
bnp_wide
```

Koden opprettet en ny df hvor verdiene i BNP og MEMOBNP er organisert etter år. Det gjør det enklere å sammenligne BNP fra år til år.

Beskriv konkret hva koden gjorde. Sammenlign `df` og `df_wide`.

SVAR\
Koden "utvidet" tibbelen. Den tok utganspunkt i de forskjellige navnene funnet i kolonnen "variabler" (her: BNP og MEMOBNP) og deres tilsvarende verdier i "kroner". Deretter "pivotet" den tibbelen med de forskjellige variablene som egne kolonner med de tilsvarende verdier i "kroner" som respektive variabler.

## Oppgave IIb: Beregn vekst

Til å beregne endring er funksjonen `lag()` meget nyttig. I denne konteksten er begrepet *lag* et engelsk verb som beskriver foregående observasjon. Bruker vi funksjoenen `lag()` på en variabel (kolonne) så returnerer den en ny kolonne hvor verdien er lik foregående observasjon. Betrakt følgende kode:

```{r}
bnp_wide <- bnp_wide %>%
  mutate(LBNP = lag(BNP,n=1L)) %>%
  mutate(LMEMOBNP = lag(MEMOBNP,n=1L))

# legger variablene i valgt rekkefølge, og gjør det mer oversiktelig

bnp_wide <- bnp_wide %>%
  relocate("LBNP", .before = "MEMOBNP")

bnp_wide
```

Hvis vi bruker den matematiske notasjonen diskutert tidligere så har vi nå kolonner med $x_{t}$ (`BNP`, `MEMOBNP`) og $x_{t-1}$ (`LBNP`, `LMEMOBNP`).

Bruk funksjonen `mutate()` til å lage en ny variabel med relativ endring i `BNP` og `MEMOBNP` i `df_wide` og lagre de som `DBNP` og `DMEMOBNP`.

```{r}

bnp_wide <- bnp_wide %>% 
  mutate(DBNP=BNP-LBNP,
         DMEMOBNP=MEMOBNP-LMEMOBNP)
bnp_wide
```

## Oppgave IIc: Omorganisere datasett med `pivot_longer()`

Bruk nå funksjonen `pivot_longer()` til å transformere `df_wide` til det opprinnelige formatet, altså med variablene `var` og `verdi`. Kall den transformerte tabellen for `df_long`.

**NB!** Husk å bruk anførselstegn (`"[variabelnavn]"`) når du definerer nye variable i `pivot_longer()`.

```{r}
df_long <- bnp_wide %>% 
  pivot_longer(cols = c("BNP", "MEMOBNP"), names_to = "variabel", values_to="BNP") %>% 
# Her valgte jeg å endre navnet på variabelen "kroner" til "BNP"
  arrange(variabel)
# Jeg organiserte den nye tibbelen etter variabelen "variabel" og siden denne består av chr så gjorde den det automatisk alfabetisk
df_long <- df_long %>% 
  relocate(år, variabel, BNP, LBNP, DBNP)
# For å gjøre det litt mer oversiktelig tok jeg de originale kolonnene og la dem lengst til venstre og i samme rekkefølge som før "wider"
df_long
```

## Oppgave IId: Figur med vekst

Lag en pen figur med prosentvis vekst i nominelt og reelt BNP per person fra 1970 til 2021. Finnes det observasjoner med negativ vekst i reell BNP? Hva skyldes dette?

SVAR\
Ja, det finnes observasjoner med negativ vekst i reell BNP, de skyldes (fra nyest, eldst)

2020 : koronapandemien; nedgang i produksjon og eksport,

2009: finanskrisen i 2008; nedgang i eksport,

1988: kraftig fall i oljeprisen, i tillegg til svekking av industrien som følge av ekstrem inflasjon.

Selv om det kan se ut som om det også var et år med negativ vekst i begynnelsen av 1980, så var det kun tilfellet i de tre nevnte årene i tidsrommet 1970-2021. \[1\]

**Merknad:** Det er en del støy i data. Prøv å kombinere `geom_point()` og `geom_smooth()` for å få et bedre inntrykk av den langsiktige utviklingen.

```{r}
# [1]Negativ vekst i BNP - en skjeldenhet i nyere tid [https://www.ssb.no/nasjonalregnskap-og-konjunkturer/artikler-og-publikasjoner/negativ-vekst-i-bnp-en-sjeldenhet-i-nyere-tid]

#Først lager jeg nye kolonner med prosentandelsforskjellen
bnp_prosBNP <- bnp_wide %>% 
  mutate(prosBNP=100*(BNP-lag(BNP))/lag(BNP))

bnp_prosMEMO <- bnp_wide %>% 
  mutate(prosMEMOBNP=100*(MEMOBNP-lag(MEMOBNP))/lag(MEMOBNP))

#Her velger jeg å lage to separate grafer da det blir mye støy med alt i samme graf. Jeg setter år > 1970 for å slippe å få opp en feilmelding da det selvfølgelig ikke finnes en prosentendring mellom 1969 og 1970.

bnp_prosBNP %>% 
  filter(år > 1970) %>% 
  ggplot(aes(x=år, y=prosBNP))+
  
#For å gjøre det enklere å se dataene med negativ vekst har jeg velgt å fremheve y = 0
  
  geom_hline(aes(yintercept = 0,
                 color="red"))+
  geom_line()+
  geom_point()+
  geom_smooth()+
  labs(title = "Prosentvis vekst i nominell BNP 1970-2021",
       x = "ÅR",
       y = "Prosent")+
  theme_minimal()+
  theme(legend.position = "none")
# Jeg velger å fjerne legend da den ikke er relevant

bnp_prosMEMO %>% 
  filter(år > 1970) %>% 
  ggplot(aes(x=år, y=prosMEMOBNP))+
  geom_hline(aes(yintercept = 0,
                 color="red"))+
  geom_line()+
  geom_point()+
  geom_smooth()+
  labs(title = "Prosentvis vekst i reell BNP 1970-2021",
       x = "ÅR",
       y = "Prosent")+
  theme_minimal()+
  theme(legend.position = "none")
```
